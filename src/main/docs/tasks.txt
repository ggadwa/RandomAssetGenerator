


* floors by grid
* turn off stories
* build floors based on grid mask
* get rid of margins, use a grid mask
* need to flip/rotate floor grids

- build multiple overlapping stories
- knock out floor that overlap
- figure out stairs later

- need frames in doorways to make up for missing headers and no-space walls

- equipment could have a desk?
- need a chair room?


- add bitmap
    geometric art (from test canvas)


    private void recurseSnakeDraw(int floorIdx,int x,int y,int dx,int dy,Rect rect,int branchCount,int pathCount)
    {
        int n;
        int offset,floorOffset;
        
        floorOffset=floorIdx*(MAP_WID*MAP_HIGH);
        
            // fill in a line of cubes for the count
            
        for (n=0;n!=pathCount;n++) {
            if (n!=0) {         // this is so x,y end at the end of the line, not after it
                x+=dx;
                y+=dy;
            }
            
            offset=floorOffset+((y*MAP_WID)+x);
            
            if ((x<0) || (y<0) || (x>=MAP_WID) || (y>=MAP_HIGH) || (mapBytes[offset]!=0)) return;

            mapBytes[offset]=1;
            
            if (x<rect.lx) rect.lx=x;
            if (x>rect.rx) rect.rx=x;
            if (y<rect.ty) rect.ty=y;
            if (y>rect.by) rect.by=y;
        }
        
            // branch
            
        branchCount--;
        if (branchCount<=0) return;
            
        recurseSnakeDraw(floorIdx,x,(y-1),0,-1,rect,branchCount,(1+random.nextInt(MAP_MAX_LINE_COUNT)));
        recurseSnakeDraw(floorIdx,x,(y+1),0,1,rect,branchCount,(1+random.nextInt(MAP_MAX_LINE_COUNT)));
        recurseSnakeDraw(floorIdx,(x-1),y,-1,0,rect,branchCount,(1+random.nextInt(MAP_MAX_LINE_COUNT)));
        recurseSnakeDraw(floorIdx,(x+1),y,1,0,rect,branchCount,(1+random.nextInt(MAP_MAX_LINE_COUNT)));
    }
    
    private boolean floodFill(int floorIdx,int x,int y,int recurseCount)
    {
        int n;
        int offset,floorOffset;
        
        if (recurseCount>MAX_FILL_RECURSE_COUNT) return(false);
        
        floorOffset=floorIdx*(MAP_WID*MAP_HIGH);
        if (mapBytes[floorOffset+((y*MAP_WID)+x)]!=0) return(true);
        
        mapBytes[floorOffset+((y*MAP_WID)+x)]=2;
        
        if (y>0) {
            if (mapBytes[floorOffset+(((y-1)*MAP_WID)+x)]==0) {
                if (!floodFill(floorIdx,x,(y-1),(recurseCount+1))) return(false);
            }
        }
        if (y<(MAP_HIGH-1)) {
            if (mapBytes[floorOffset+(((y+1)*MAP_WID)+x)]==0) {
                if (!floodFill(floorIdx,x,(y+1),(recurseCount+1))) return(false);
            }
        }
        if (x>0) {
            if (mapBytes[floorOffset+((y*MAP_WID)+(x-1))]==0) {
                if (!floodFill(floorIdx,(x-1),y,(recurseCount+1))) return(false);
            }
        }
        if (x<(MAP_WID-1)) {
            if (mapBytes[floorOffset+((y*MAP_WID)+(x+1))]==0) {
                if (!floodFill(floorIdx,(x+1),y,(recurseCount+1))) return(false);
            }
        }
        
        return(true);
    }
    
    private void build()
    {
        int x,y,mx,my,floorOffset;
        byte[] mapBackup;
        Rect rect;
        
            // start in the middle and keep a list
            // of the final bounds
            
        mx=MAP_WID/2;
        my=MAP_HIGH/2;
        
        rect=new Rect();
        rect.lx=rect.rx=mx;
        rect.ty=rect.by=my;
        
            // recurse snake draw the initial map
            
        recurseSnakeDraw(floorIdx,(MAP_WID/2),(MAP_HIGH/2),0,0,rect,MAP_MAX_BRANCH_COUNT,0);
        
        mapBackup=new byte[MAP_FLOOR_COUNT*(MAP_WID*MAP_HIGH)];
        floorOffset=floorIdx*(MAP_WID*MAP_HIGH);
        
        for (y=rect.ty;y<rect.by;y++) {
            for (x=rect.lx;x<rect.rx;x++) {
                if (mapBytes[floorOffset+((y*MAP_WID)+x)]!=0) continue;
                
                System.arraycopy(mapBytes,0,mapBackup,0,mapBytes.length);
                if (!floodFill(floorIdx,x,y,0)) System.arraycopy(mapBackup,0,mapBytes,0,mapBytes.length);
            }
        }
//        
    }


- model
   - randomize legs (w/forceBilateral)



- bitmaps
   - metal - screws get random rotated cross or straight line

jpackage (doesn't seem to work, need more testing)
c:/Java/jdk-15.0.2/bin/jpackage --name RandomAssetGenerator --input c:\Code\RandomAssetGenerator\target --main-jar RandomAssetGenerator-1.0.jar --main-class com.klinksoftware.rag.RandomAssetGenerator --win-dir-chooser --type EXE